<?xml version="1.0" encoding="utf-8"?>
<project name="GCom" default="compile" basedir=".">

   <!-- Dir Properties -->
   <property name="build.dir" location="bin"/>
   <property name="build.main.dir" location="${build.dir}/main/java"/>
   <property name="build.test.dir" location="${build.dir}/test/java"/>
   
   <property name="src.dir" location="src"/>
   <property name="src.main.dir" location="${src.dir}/main/java"/>
   <property name="src.test.dir" location="${src.dir}/test/java"/>
   
   <property name="doc.dir" location="doc"/>
   <property name="lib.dir" location="lib"/>
   <property name="index.dir" location="index"/>

   <!-- Dir program resources -->
   <property name="src.main.resources.dir" location="${src.main.dir}/../resources"/>
   <property name="build.main.resources.dir" location="${build.main.dir}/resources"/>

   <!-- Package name, dirs -->
   <property name="name" value="GCom" />
   <property name="version" value="1.0" />
   <property name="release" value="${name}-${version}" />

   <property name="dist.dir" location="." />
   <property name="jar.name" value="${name}.jar" />
   <property name="jar.path" location="${dist.dir}/${jar.name}" />

   <!-- Classpath -->
   <path id="project.classpath">
      <pathelement location="${build.main.dir}" />
      <pathelement location="${build.test.dir}" />
      <fileset dir="${lib.dir}">
         <include name="*.jar"/>
      </fileset>
   </path>

   <!-- Create build-dirs -->
   <target name="prepare">
      <mkdir dir="${build.main.dir}"/>
      <mkdir dir="${lib.dir}"/>
      <mkdir dir="${build.test.dir}"/>
   </target>

   <!-- Remove build files -->
   <target name="clean">
      <delete dir="${build.dir}" />
   </target>

   <!-- Compile program -->
   <target name="compile" depends="prepare">
      <!-- Copy resource dirs -->
      <copy todir="${build.main.resources.dir}">
         <fileset dir="${src.main.resources.dir}"/>
      </copy>
      
      <!-- Compile source -->
      <javac srcdir="${src.main.dir}" destdir="${build.main.dir}" debug="on">
         <classpath refid="project.classpath" />
         <!-- <compilerarg value="-Xlint:unchecked"/> -->
      </javac>
   </target>

   <!-- Compile tests -->
   <target name="compile-tests" depends="compile">
      <!-- Copy dirs -->
      <!--     <copy todir="${build.test.dir}/resources"> -->
      <!--       <fileset dir="${src.resources.dir}"/> -->
      <!--     </copy> -->
      <!-- Compile -->
      <javac srcdir="${src.test.dir}" destdir="${build.test.dir}">
         <classpath refid="project.classpath" />
      </javac>
   </target>

   <!-- Run tests -->
   <target name="test" depends="compile-tests">
      <junit haltonfailure="true" dir="${build.test.dir}" fork="true">
         <classpath refid="project.classpath" />
         <formatter type="plain" usefile="false" />
         <batchtest>
            <!-- Run junit tests on all classes with filenames that end with -->
            <!-- Test.class -->
            <fileset dir="${build.test.dir}"
                     includes="**/*Test.class" />
         </batchtest>
         <sysproperty key="doc.dir" value="${doc.dir}" />
         <sysproperty key="index.dir" value="${index.dir}" />
      </junit>
   </target>

   <!-- Generate javadoc -->
   <target name="javadoc" description="Generaties javadoc">
      <javadoc destdir="${doc.dir}">
         <classpath refid="project.classpath" />
         <fileset dir="${src.dir}/" includes="**/*.java"/>
      </javadoc>
   </target>

   <!-- Start? -->
   <target name="start-server" description="Starts server" depends="compile">
      <java classname="se.umu.cs.jsgajn.gcom.Server" fork="true" dir="${build.main.dir}">
         <!-- <sysproperty key="java.rmi.server.codebase" value="file:${build.main.dir}"/> -->
         <classpath refid="project.classpath" />
         <arg value="-Djava.rmi.server.codebase=file:/Users/anton/Documents/skola/dist/GCom/bin/main/java/"/>
      </java>
   </target>

   <!--   Create jar -->
   <target name="jar" description="Create jar-file" depends="compile">
      <mkdir dir="${dist.dir}"/>

      <!-- create a property containing all .jar files, prefix lib/, and seperated with a space -->
      <pathconvert property="libs.project" pathsep=" ">
         <mapper>
            <chainedmapper>
               <!-- remove absolute path -->
               <flattenmapper />
               <!-- add lib/ prefix -->
               <globmapper from="*" to="lib/*" />
            </chainedmapper>
         </mapper>
         <path>

            <!-- lib.home contains all jar files, in several subdirectories -->
            <fileset dir="${lib.dir}">
               <include name="**/*.jar" />
            </fileset>
         </path>
      </pathconvert>

      <!-- Create jar -->
      <jar destfile="${jar.path}" basedir="${build.main.dir}">
         <!-- define MANIFEST.MF -->
         <manifest>
            <attribute name="Built-By" value="${user.name}" />
            <attribute name="Main-Class" value="se.umu.cs.dit06ajnajs.AntiTD"/>

            <!-- finally, use the magically generated libs path -->
            <attribute name="Class-Path" value="${libs.project}" />
         </manifest>
      </jar>
   </target>

   <target name="print-classpath" description="Prints classpath, convenient for export to emacs and jde-mode">
      <property name="classpath" refid="project.classpath"/>
      <echo message="-classpath-${classpath}-classpath-"/>
   </target>
</project>